# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading
from subprocess import run, PIPE, Popen

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QMainWindow, QApplication, QTreeView, QFileDialog
from PyQt5.Qt import QFileSystemModel
from PyQt5.QtCore import pyqtSlot, QEventLoop, pyqtSignal, QObject
import os
import shutil
import StdoutRedirect
import imagedownUI
import DefaultPathControl
import SecurePathControl
import ColorPrint
import tarfile
import Hwlist_Secure_check
from pathlib import Path





class Ui_Dialog(object):

    src_path_filename = ".\\src_default_path.bin"
    tar_path_filename = ".\\tar_default_path.bin"
    sign_elf_filename = ".\\SIGNED_ABLMINI_ELF"
    sec_facos_filename= ".\\DEV_SEC_ELF"
    oCOLOR = ColorPrint.Colors()
    #hw_list = ["FULL", "CORE"]

    def setupUi(self, Dialog):
        Dialog.setObjectName("AIVI2 AUTO TOOL")
        Dialog.setWindowTitle("AIVI2 AUTO TOOL")
        Dialog.resize(723, 900)


        self.oPathControl_AndroTar = DefaultPathControl.CexplorerPathControl(self.tar_path_filename, Dialog)
        self.oPathControl_AndroTar.lineEdit_path_txt.setGeometry(QtCore.QRect(30, 350, 291, 31))
        self.oPathControl_AndroTar.treeView_explorer.setGeometry(QtCore.QRect(30, 140, 291, 192))
        self.oPathControl_AndroTar.bt_path_search.setGeometry(QtCore.QRect(30, 100, 120, 23))
        self.oPathControl_AndroTar.bt_path_search.setObjectName("bt_androPath")
        self.oPathControl_AndroTar.bt_path_open.setGeometry(QtCore.QRect(220, 385, 100, 20))
        self.oPathControl_AndroTar.bt_path_open.setObjectName("bt_movepaht_and")
        self.oPathControl_AndroTar.bt_path_save.setGeometry(QtCore.QRect(110, 385, 100, 20))
        self.oPathControl_AndroTar.bt_path_save.setObjectName("bt_savepath_and")
        self.oPathControl_AndroTar.label.setGeometry(QtCore.QRect(500, 90, 141, 31))

        self.oPathControl_FacosSrc = DefaultPathControl.CexplorerPathControl(self.src_path_filename, Dialog)
        self.oPathControl_FacosSrc.lineEdit_path_txt.setGeometry(QtCore.QRect(370, 350, 291, 31))
        self.oPathControl_FacosSrc.treeView_explorer.setGeometry(QtCore.QRect(370, 140, 291, 192))
        self.oPathControl_FacosSrc.bt_path_search.setGeometry(QtCore.QRect(370, 100, 120, 23))
        self.oPathControl_FacosSrc.bt_path_search.setObjectName("bt_facosPath")
        self.oPathControl_FacosSrc.bt_path_open.setGeometry(QtCore.QRect(560, 385, 100, 20))
        self.oPathControl_FacosSrc.bt_path_open.setObjectName("bt_movepaht_fac")
        self.oPathControl_FacosSrc.bt_path_save.setGeometry(QtCore.QRect(450, 385, 100, 20))
        self.oPathControl_FacosSrc.bt_path_save.setObjectName("bt_savepath_fac")
        self.oPathControl_FacosSrc.label.setGeometry(QtCore.QRect(170, 90, 141, 31))

        self.oPathControl_sign_elf = SecurePathControl.CexplorerPathControl(self.sign_elf_filename, Dialog)
        self.oPathControl_sign_elf.lineEdit_path_txt.setGeometry(QtCore.QRect(480, 410, 180, 20))
        self.oPathControl_sign_elf.treeView_explorer.setGeometry(QtCore.QRect(370, 430, 291, 80))
        self.oPathControl_sign_elf.label.setGeometry(QtCore.QRect(350, 400, 140, 31))
        self.oPathControl_sign_elf.label_disable.setGeometry(QtCore.QRect(400, 450, 200, 45))
        self.oPathControl_Sec_facos = SecurePathControl.CexplorerPathControl(self.sec_facos_filename, Dialog)
        self.oPathControl_Sec_facos.lineEdit_path_txt.setGeometry(QtCore.QRect(480, 520, 180, 20))
        self.oPathControl_Sec_facos.treeView_explorer.setGeometry(QtCore.QRect(370, 540, 291, 80))
        self.oPathControl_Sec_facos.label.setGeometry(QtCore.QRect(350, 510, 80, 31))
        self.oPathControl_Sec_facos.label_disable.setGeometry(QtCore.QRect(400, 555, 200, 45))

        self.oHwSecCheck = Hwlist_Secure_check.Hwlist_check(Dialog)
        self.oHwSecCheck.combobox_1.activated[str].connect(self.on_Act_changed)
        self.on_Act_changed(self.oHwSecCheck.combobox_1.currentText())

        # checkBox Setting
        self.oSecureCheck = Hwlist_Secure_check.Secure_check(Dialog)
        self.oSecureCheck.combobox_sec.activated[str].connect(self.on_Act_changed_sec)

        # ------------------TEMP BT--------------------------------------------------

        #button Setting
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(610, 60, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.download_lialog_open)

        self.bt_temp1 = QtWidgets.QPushButton(Dialog)
        self.bt_temp1.setGeometry(QtCore.QRect(30, 530, 113, 20))
        self.bt_temp1.setObjectName("temp_bt1")
        self.bt_temp1.clicked.connect(self.file_cp)

        self.bt_temp2 = QtWidgets.QPushButton(Dialog)
        self.bt_temp2.setGeometry(QtCore.QRect(30, 550, 113, 20))
        self.bt_temp2.setObjectName("temp_bt2")
        self.bt_temp2.clicked.connect(self.on_cliked_bt_checkFacos)

        self.bt_temp3 = QtWidgets.QPushButton(Dialog)
        self.bt_temp3.setGeometry(QtCore.QRect(30, 570, 113, 20))
        self.bt_temp3.setObjectName("temp_bt3")
        self.bt_temp3.clicked.connect(self.temp3_func)

        self.bt_temp4 = QtWidgets.QPushButton(Dialog)
        self.bt_temp4.setGeometry(QtCore.QRect(30, 590, 113, 20))
        self.bt_temp4.setObjectName("temp_bt4")
        self.bt_temp4.clicked.connect(lambda: self.run_os_system("dir"))

        # Text Browser setting

        self.systemBrowser = QtWidgets.QTextBrowser(Dialog)
        self.systemBrowser.setGeometry(QtCore.QRect(30, 630, 640, 240))
        self.systemBrowser.setObjectName("systemBrowser")
        self.systemBrowser.setText("test Default=================")

        #--------------------------------------------------------------------
        self._stdout = StdoutRedirect.StdoutRedirect(self)
        self._stdout.start()
        self._stdout.printOccur.connect(lambda x: self._append_text(x))


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        #self.oSecureCheck.combobox_sec.setText(_translate("Dialog", "Secure"))
        self.pushButton_3.setText(_translate("Dialog", "PushButton"))
        self.oPathControl_AndroTar.bt_path_search.setText(_translate("Dialog", "And_path_open"))
        self.oPathControl_FacosSrc.bt_path_search.setText(_translate("Dialog", "FacOS_path_open"))

        self.oPathControl_AndroTar.bt_path_open.setText(_translate("Dialog", "open_Android"))
        self.oPathControl_FacosSrc.bt_path_open.setText(_translate("Dialog", "open_Facos"))
        self.oPathControl_AndroTar.bt_path_save.setText(_translate("Dialog", "Save_Tar_path"))
        self.oPathControl_FacosSrc.bt_path_save.setText(_translate("Dialog", "Save_Src_path"))


        self.bt_temp1.setText(_translate("Dialog", "file cp test"))
        self.bt_temp2.setText(_translate("Dialog", "checkFacos"))
        self.bt_temp3.setText(_translate("Dialog", "Tar unzip"))
        self.bt_temp4.setText(_translate("Dialog", "calc cmd test"))
        self.oPathControl_AndroTar.label.setText(_translate("Dialog", "FactoryOS PATH View"))
        self.oPathControl_FacosSrc.label.setText(_translate("Dialog", "Android PATH View"))
        self.oPathControl_sign_elf.label.setText(_translate("Dialog", "Sigend_facos_abl"))
        self.oPathControl_Sec_facos.label.setText(_translate("Dialog", "SEC.elf"))

    def download_lialog_open(self):
        self.download_Dialog = QtWidgets.QDialog()
        self.download_Dialog.setWindowTitle("download tool")
        self.oDonwload_md = imagedownUI.Download_Ui_Form(self.download_Dialog)
        self.download_Dialog.show()


    def on_Act_changed(self, text):
        if text == self.oHwSecCheck.full or self.oHwSecCheck.core:
            tempurl = self.sign_elf_filename + '\\' + text
            tempurl2 = self.sec_facos_filename + '\\' + text
            self.oPathControl_sign_elf.open_path_by_url(tempurl)
            self.oPathControl_Sec_facos.open_path_by_url(tempurl2)
        else:
            print("ERR")

    def on_Act_changed_sec(self, text):
        if text == self.oSecureCheck.secure:
            self.oPathControl_sign_elf.label_disable.setVisible(False)
            self.oPathControl_sign_elf.treeView_explorer.setVisible(True)
            self.oPathControl_Sec_facos.label_disable.setVisible(False)
            self.oPathControl_Sec_facos.treeView_explorer.setVisible(True)
        elif text == self.oSecureCheck.nonsecure:
            self.oPathControl_sign_elf.label_disable.setVisible(True)
            self.oPathControl_sign_elf.treeView_explorer.setVisible(False)
            self.oPathControl_Sec_facos.label_disable.setVisible(True)
            self.oPathControl_Sec_facos.treeView_explorer.setVisible(False)
        else:
            print("ERR")

    def check_sec(self):
        if self.combobox_1.isChecked() :
            print("checked")
        else:
            print("unchecked")

    def on_cliked_bt_checkFacos(self):
        print("\ntemp2 and minios file / version check")
        tmp_src_path = self.oPathControl_FacosSrc.lineEdit_path_txt.text() + "\\miniosdata.img"
        if os.path.exists(tmp_src_path):
            print("miniosdata.img exists the version check")
            tmp_file = open(tmp_src_path, 'rb')
            tmp_file.seek(0x4E8000)
            tmp_str = tmp_file.read(21).decode('euc-kr')
            self.facos_verinfo = tmp_str.split('_')
            print(self.facos_verinfo)
            if self.facos_verinfo[1] == self.oHwSecCheck.full or self.oHwSecCheck.core:
                print(self.facos_verinfo[1])
                self.oHwSecCheck.combobox_1.setCurrentText(self.facos_verinfo[1])
                self.on_Act_changed(self.facos_verinfo[1])
            tmp_file.close()

        else:
            print("there is no factoryOS DIR Please check again")
    def temp3_func(self):
        tmp_src_path = self.oPathControl_AndroTar.lineEdit_path_txt.text()
        if (tmp_src_path[-6:] == 'tar.gz'):
            self.t1 = threading.Thread(target=self.temp3_func_targzfilecheck, args=(tmp_src_path,))
            self.t1.daemon = True
            self.t1.start()

        else:
            print("Please check tar.gz file or not in Target DIR")
            tmp_Path = Path(tmp_src_path)
            print(tmp_Path.parent)

    def temp3_func_targzfilecheck(self, tmp_src_path):
        tmp_src_path = self.oPathControl_AndroTar.lineEdit_path_txt.text()
        print(tmp_src_path[-6:])
        temp_tar = tarfile.open(tmp_src_path, 'r')
        self.unziped_targz_name = temp_tar.getmembers()[0].name
        print(self.unziped_targz_name) #self.run_os_system("tar tvfz "+tmp_src_path)
        temp_tar.close()


    def file_cp(self):
        temp_cmd_table = str.maketrans('/', '\\')
        tmp_src_path = self.oPathControl_FacosSrc.lineEdit_path_txt.text()
        tmp_src_path = tmp_src_path.translate(temp_cmd_table)
        src_path = tmp_src_path + "\\*"
        self.check_facos_filelist(tmp_src_path)

        target_path = self.oPathControl_AndroTar.lineEdit_path_txt.text()
        target_path = target_path.translate(temp_cmd_table)
        temp_cmd = 'robocopy '+ tmp_src_path + ' "' + target_path + '"'
        #self.run_os_system(temp_cmd)
        #self.run_os_system("start cmd /k "+temp_cmd)
        self.run_os_system("start cmd /c " + temp_cmd)

        print("COPY DONE")

    def run_os_system(self, cmd):
        import subprocess
        bat_cmd = cmd
        p = subprocess.Popen(bat_cmd, stdout=subprocess.PIPE, shell=True)
        result = p.stdout.read()
        result2 = result.decode('euc-kr')
        print(result2)

    def _append_text(self, msg):
        self.systemBrowser.moveCursor(QtGui.QTextCursor.End)
        self.systemBrowser.insertPlainText(msg)
        # refresh textedit show, refer) https://doc.qt.io/qt-5/qeventloop.html#ProcessEventsFlag-enum
        QApplication.processEvents(QEventLoop.ExcludeUserInputEvents)

    def check_facos_filelist(self, dir_path):
        filelist = ["ablmini.elf","miniosdata.img","miniosdtbo.img","minioskernel.img","miniosmain.img"]

        if os.path.exists(dir_path+"\\ablmini.img"):
            print("ablmini.img exists we have to change elf file")
            file_oldname = os.path.join(dir_path, "ablmini.img")
            file_newname = os.path.join(dir_path, "ablmini.elf")
            shutil.move(file_oldname, file_newname)

        print(__name__)
        for i in filelist:
            if os.path.exists(dir_path+"\\"+i):
                print(i)
            else:
                self.oCOLOR.COLOR_PRINT( i+"IS NOT EXIST", self.oCOLOR.RED)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()

    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    #test_ui_im.retranslateUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
